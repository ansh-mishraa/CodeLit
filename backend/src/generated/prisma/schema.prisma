// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id                String   @id @default(uuid())
  name              String?
  email             String   @unique
  image             String?
  role              UserRole @default(USER)
  password          String
  verificationToken String?  @unique
  refreshToken      String?  @unique
  isVerified        Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  problems Problem[]

  submissions Submission[]

  solvedProblems ProblemSolved[]
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  tags        String[]

  userId String

  examples    Json
  constraints String
  hint        String?
  editorial   String?

  testCases          Json
  codeSnippets       Json
  referenceSolutions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relationships

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  submissions Submission[]

  solvedBy ProblemSolved[]
}

model Submission {
  id         String  @id @default(uuid())
  sourceCode Json
  language   String
  status     String
  timeTaken  String?
  memoryUsed String?

  problemId String
  userId    String

  stdin          String?
  stdout         String?
  stderr         String?
  compiledOutput String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relationships

  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  testCaseResults testCaseResult[]
}

model testCaseResult {
  id String @id @default(uuid())

  testCase Int
  passed   Boolean

  stdOut         String?
  expectedOutput String
  strdErr        String?

  compiledOutput String?
  status         String
  timeTaken      String?
  memoryUsed     String?

  submissionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relationships

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String @id @default(uuid())
  userId    String
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relationships

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}
