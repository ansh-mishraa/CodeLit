// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

//User Model
model User {
  id                String   @id @default(uuid())
  name              String?
  email             String   @unique
  image             String?
  role              UserRole @default(USER)
  password          String
  verificationToken String?  @unique
  refreshToken      String?  @unique
  isVerified        Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  problems Problem[] //the problem he created (as admin)

  submissions Submission[] //the submission user made, by solving the problem (Either right or wrong)

  solvedProblems ProblemSolved[] //the problems that are successfully solved (Marked as done)

  playlists Playlist[]
}

//Problem Model
model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  tags        String[]

  userId String

  examples    Json
  constraints String
  hint        String?
  editorial   String?

  testCases          Json
  codeSnippets       Json
  referenceSolutions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relationships

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // relation with user who created this problem

  submissions Submission[] //for the problem all the submissions

  solvedBy ProblemSolved[] //for the problem those who solved it successfully

  inPlaylist ProblemInPlaylist[]
}

//Submission Model
model Submission {
  id         String  @id @default(uuid())
  sourceCode String?
  language   String
  status     String
  timeTaken  String?
  memoryUsed String?

  problemId String
  userId    String

  stdin          String?
  stdout         String?
  stderr         String?
  compiledOutput String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relationships

  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade) // relation with problem for which submission is made
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade) // relation with user by whom the submission is made

  testCaseResults TestCaseResult[] // all the results of testcases in the particular submission of the problem
}

//TestCaseResult Model
model TestCaseResult {
  id String @id @default(uuid())

  testCase Int
  passed   Boolean

  stdOut         String?
  expectedOutput String
  stdErr         String?

  compiledOutput String?
  status         String
  timeTaken      String?
  memoryUsed     String?

  submissionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relationships

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade) // relation with submission for which submission the testcases are

  @@index([submissionId]) //easy to find by submissionId
}

//Problem Solved Model
model ProblemSolved {
  id        String @id @default(uuid())
  userId    String
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relationships

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade) //relation with user who solved the problem successfully (marked as done)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade) // relation with problem which is solved 

  @@unique([userId, problemId]) //both userId and problemId together uniquely define the tuple
}

model Playlist {
  id          String  @id @default(uuid())
  name        String
  description String?

  userId String

  problems ProblemInPlaylist[] //list of problems in a playlist
  user     User                @relation(fields: [userId], references: [id], onDelete: Cascade) //relation with user who solved the problem successfully (marked as done)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, userId]) //CK is name and userId combination
}

model ProblemInPlaylist {
  id         String @id @default(uuid())
  playlistId String
  problemId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playlistId, problemId])
}
